// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_us_news/test/data/repositories/news/news_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_us_news/src/data/datasource/news/news_data_provider.dart'
    as _i2;
import 'package:flutter_us_news/src/data/dto/news/db/news_data_item.dart'
    as _i4;
import 'package:flutter_us_news/src/domain/dto/sort/sort_by.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NewsDataProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsDataProvider extends _i1.Mock implements _i2.NewsDataProvider {
  MockNewsDataProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> addNewsListToCache(List<_i4.NewsDataItem>? items) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNewsListToCache,
          [items],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.NewsDataItem?> getNewsDetail(String? newsID) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewsDetail,
          [newsID],
        ),
        returnValue: _i3.Future<_i4.NewsDataItem?>.value(),
      ) as _i3.Future<_i4.NewsDataItem?>);

  @override
  _i3.Future<List<_i4.NewsDataItem>> getNewsList({
    required int? from,
    required int? to,
    required List<String>? queries,
    required _i5.SortBy? sortBy,
    required int? pageNumber,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewsList,
          [],
          {
            #from: from,
            #to: to,
            #queries: queries,
            #sortBy: sortBy,
            #pageNumber: pageNumber,
          },
        ),
        returnValue:
            _i3.Future<List<_i4.NewsDataItem>>.value(<_i4.NewsDataItem>[]),
      ) as _i3.Future<List<_i4.NewsDataItem>>);
}
